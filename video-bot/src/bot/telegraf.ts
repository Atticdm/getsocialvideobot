import { Telegraf, Markup } from 'telegraf';
import type { Context } from 'telegraf';
import { config } from '../core/config';
import { logger } from '../core/logger';
import { ensureTempDir } from '../core/fs';
import { run } from '../core/exec';
import { startCommand } from './commands/start';
import { helpCommand } from './commands/help';
import { statusCommand } from './commands/status';
import { downloadCommand } from './commands/download';
import { diagCommand } from './commands/diag';
import { translateCommand } from './commands/translate';
import { TranslationDirection, TranslationEngine, TranslationMode } from '../types/translation';
import {
  translateEngineKeyboard,
  mainKeyboard,
  translateDirectionKeyboard,
  voiceChoiceKeyboard,
  voiceLanguageKeyboard,
  linkPromptKeyboard,
} from '../ui/keyboard';
import { getVoiceIdForPreset } from '../services/elevenlabs';
import { setupInlineHandlers } from './inline';
import type { VoiceLanguage, VoicePreset } from '../types/voice';
import { getArenaDisplayName, isArenaPublishingEnabled, publishCandidateToken } from './publish';

type TranslationIntent =
  | { flow: 'translate'; stage: 'direction' }
  | { flow: 'translate'; stage: 'engine'; direction: TranslationDirection }
  | {
      flow: 'translate';
      stage: 'ready';
      direction: TranslationDirection;
      mode: TranslationMode;
      engine: TranslationEngine;
      voicePreset?: VoicePreset['id'];
    }
  | { flow: 'voice'; stage: 'language' }
  | { flow: 'voice'; stage: 'voice'; language: VoiceLanguage }
  | {
      flow: 'voice';
      stage: 'ready';
      direction: TranslationDirection;
      mode: TranslationMode;
      engine: TranslationEngine;
      voicePreset: VoicePreset['id'];
      language: VoiceLanguage;
    };

export const bot = new Telegraf(config.BOT_TOKEN!);

let handlersRegistered = false;
let signalsRegistered = false;
export const translationIntents = new Map<number, TranslationIntent>();
const arenaPublishRequests = new Set<number>();

const ARENA_MEMBER_STATUSES = new Set(['member', 'administrator', 'creator']);

async function ensureArenaSubscription(ctx: Context): Promise<boolean> {
  if (!isArenaPublishingEnabled()) return true;
  const userId = ctx.from?.id;
  if (!userId) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return false;
  }

  try {
    const member = await ctx.telegram.getChatMember(config.ARENA_CHANNEL_ID!, userId);
    if (ARENA_MEMBER_STATUSES.has(member.status)) return true;
  } catch (error) {
    logger.warn({ error, userId }, 'Failed to verify arena subscription');
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return false;
  }

  const channelLink = config.ARENA_CHANNEL_URL || (config.ARENA_CHANNEL_ID?.startsWith('@')
    ? `https://t.me/${config.ARENA_CHANNEL_ID.slice(1)}`
    : undefined);

  const message = `–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ ${getArenaDisplayName()}, —á—Ç–æ–±—ã –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–ª–∏–∫–∏.`;
  if (channelLink) {
    await ctx.reply(message, {
      reply_markup: Markup.inlineKeyboard([Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', channelLink)]).reply_markup,
    });
  } else {
    await ctx.reply(message);
  }
  return false;
}

async function logToolVersions(): Promise<void> {
  try {
    const ytdlpVersion = await run('yt-dlp', ['--version']);
    const ffmpegVersion = await run('ffmpeg', ['-version']);
    logger.info(
      {
        'yt-dlp': ytdlpVersion.stdout.trim(),
        ffmpeg: ffmpegVersion.stdout.split('\n')[0],
      },
      'Tool versions'
    );
  } catch (error) {
    logger.error(error, 'Failed to check tool versions on startup');
  }
}

function ensureSignals(): void {
  if (signalsRegistered) return;
  signalsRegistered = true;
  process.once('SIGINT', () => {
    logger.info('Received SIGINT, shutting down gracefully');
    bot.stop('SIGINT');
  });

  process.once('SIGTERM', () => {
    logger.info('Received SIGTERM, shutting down gracefully');
    bot.stop('SIGTERM');
  });
}

export async function setupBot(): Promise<void> {
  if (handlersRegistered) return;
  handlersRegistered = true;

  bot.command('start', startCommand);
  bot.command('help', helpCommand);
  bot.command('status', statusCommand);
  bot.command('download', downloadCommand);
  bot.command('dl', downloadCommand);
  bot.command('get', downloadCommand);
  bot.command('diag', diagCommand);
  bot.command('translate', translateCommand);

  setupInlineHandlers(bot);

  const ensureTranslationEnabled = async (ctx: Context) => {
    if (!config.ENABLE_REEL_TRANSLATION) {
      await ctx.reply(
        '‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–∏–ª—Å–æ–≤ –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENABLE_REEL_TRANSLATION=1, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –µ—ë.'
      );
      return false;
    }
    return true;
  };


  const startTranslateFlow = async (ctx: Context) => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    const enabled = await ensureTranslationEnabled(ctx);
    if (!enabled) return;

    translationIntents.set(userId, { flow: 'translate', stage: 'direction' });
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:', {
      reply_markup: translateDirectionKeyboard.reply_markup,
    });
  };

  const startVoiceFlow = async (ctx: Context) => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    const enabled = await ensureTranslationEnabled(ctx);
    if (!enabled) return;

    translationIntents.set(userId, { flow: 'voice', stage: 'language' });
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞:', {
      reply_markup: voiceLanguageKeyboard.reply_markup,
    });
  };

  const registerTranslationDirection = async (ctx: Context, direction: TranslationDirection) => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      return;
    }

    const enabled = await ensureTranslationEnabled(ctx);
    if (!enabled) return;

    const intent = translationIntents.get(userId);
    if (!intent || intent.flow !== 'translate' || intent.stage !== 'direction') {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞.', {
        reply_markup: mainKeyboard.reply_markup,
      });
      return;
    }

    translationIntents.set(userId, { flow: 'translate', stage: 'engine', direction });
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:', {
      reply_markup: translateEngineKeyboard.reply_markup,
    });
  };

  const registerTranslateEngine = async (ctx: Context, choice: 'hume' | 'elevenlabs' | 'terminator') => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      return;
    }

    const intent = translationIntents.get(userId);
    if (!intent || intent.flow !== 'translate' || intent.stage !== 'engine') {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞.', {
        reply_markup: translateDirectionKeyboard.reply_markup,
      });
      return;
    }

    const direction = intent.direction;
    if (choice === 'hume') {
      translationIntents.set(userId, {
        flow: 'translate',
        stage: 'ready',
        direction,
        mode: 'translate',
        engine: 'hume',
      });
      await ctx.reply('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫.', {
        reply_markup: linkPromptKeyboard.reply_markup,
      });
      return;
    }

    if (choice === 'elevenlabs') {
      translationIntents.set(userId, {
        flow: 'translate',
        stage: 'ready',
        direction,
        mode: 'translate',
        engine: 'elevenlabs',
      });
      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫.', {
        reply_markup: linkPromptKeyboard.reply_markup,
      });
      return;
    }

    if (choice === 'terminator') {
      const voicePreset: VoicePreset['id'] = direction === 'en-ru' ? 'terminator-ru' : 'terminator-en';
      translationIntents.set(userId, {
        flow: 'translate',
        stage: 'ready',
        direction,
        mode: 'voice',
        engine: 'elevenlabs',
        voicePreset,
      });
      await ctx.reply('–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫.', {
        reply_markup: linkPromptKeyboard.reply_markup,
      });
      return;
    }
  };

  const startArenaPublishFlow = async (ctx: Context) => {
    if (!isArenaPublishingEnabled()) {
      await ctx.reply('‚öôÔ∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
      return;
    }
    const subscribed = await ensureArenaSubscription(ctx);
    if (!subscribed) return;
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    arenaPublishRequests.add(userId);
    translationIntents.delete(userId);
    await ctx.reply(
      `üì£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫, –∏ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —è –æ–ø—É–±–ª–∏–∫—É—é –µ–≥–æ –≤ ${getArenaDisplayName()}.\n\n–ù–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.`,
      {
        reply_markup: linkPromptKeyboard.reply_markup,
      }
    );
  };

  const registerVoiceLanguage = async (ctx: Context, language: VoiceLanguage) => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      return;
    }
    const intent = translationIntents.get(userId);
    if (!intent || intent.flow !== 'voice' || intent.stage !== 'language') {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–∑–≤—É—á–∫–∏.', {
        reply_markup: mainKeyboard.reply_markup,
      });
      return;
    }

    translationIntents.set(userId, { flow: 'voice', stage: 'voice', language });
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:', {
      reply_markup: voiceChoiceKeyboard(language).reply_markup,
    });
  };

  const registerVoicePreset = async (ctx: Context, preset: VoicePreset['id']) => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      return;
    }
    const intent = translationIntents.get(userId);
    if (!intent || intent.flow !== 'voice' || intent.stage !== 'voice') {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ä–æ–ª–∏–∫–∞.', {
        reply_markup: voiceLanguageKeyboard.reply_markup,
      });
      return;
    }

    const voiceId = getVoiceIdForPreset(preset);
    if (!voiceId) {
      await ctx.reply(
        '‚ùå –ì–æ–ª–æ—Å —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ELEVENLABS_TER–ú–òN–ê–¢–û–†_VOICE_RU / ELEVENLABS_TERMINATOR_VOICE_EN.',
        {
          reply_markup: voiceChoiceKeyboard(intent.language).reply_markup,
        }
      );
      return;
    }

    const direction: TranslationDirection = intent.language === 'ru' ? 'identity-ru' : 'identity-en';

    translationIntents.set(userId, {
      flow: 'voice',
      stage: 'ready',
      direction,
      mode: 'voice',
      engine: 'elevenlabs',
      voicePreset: preset,
      language: intent.language,
    });

    await ctx.reply('–ì–æ–ª–æ—Å –≤—ã–±—Ä–∞–Ω! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏.', {
      reply_markup: linkPromptKeyboard.reply_markup,
    });
  };

  bot.hears('üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ', startTranslateFlow);
  bot.hears('üéô –û–∑–≤—É—á–∏—Ç—å –≤–∏–¥–µ–æ', startVoiceFlow);
  bot.hears('üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª', startArenaPublishFlow);
  bot.command('publish', startArenaPublishFlow);

  bot.hears('üá¨üáß ‚Üí üá∑üá∫', (ctx) => registerTranslationDirection(ctx, 'en-ru'));
  bot.hears('üá∑üá∫ ‚Üí üá¨üáß', (ctx) => registerTranslationDirection(ctx, 'ru-en'));

  bot.hears('üöÄ –ë—ã—Å—Ç—Ä—ã–π (Hume)', (ctx) => registerTranslateEngine(ctx, 'hume'));
  bot.hears('üíé –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π (ElevenLabs)', (ctx) => registerTranslateEngine(ctx, 'elevenlabs'));
  bot.hears('üéØ –ì–æ–ª–æ—Å –¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞', (ctx) => registerTranslateEngine(ctx, 'terminator'));

  bot.hears('üá∑üá∫ –†–æ–ª–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º', (ctx) => registerVoiceLanguage(ctx, 'ru'));
  bot.hears('üá¨üáß Video in English', (ctx) => registerVoiceLanguage(ctx, 'en'));

  bot.hears('ü§ñ Terminator (RU)', (ctx) => registerVoicePreset(ctx, 'terminator-ru'));
  bot.hears('ü§ñ Terminator (EN)', (ctx) => registerVoicePreset(ctx, 'terminator-en'));

  const cancelFlow = async (ctx: Context) => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    translationIntents.delete(userId);
    arenaPublishRequests.delete(userId);
    await ctx.reply('–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–∫–ª—é—á—ë–Ω.', {
      reply_markup: mainKeyboard.reply_markup,
    });
  };

  bot.command('cancel', cancelFlow);
  bot.hears('–û—Ç–º–µ–Ω–∞', cancelFlow);

  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    arenaPublishRequests.delete(userId);
    const intent = translationIntents.get(userId);
    if (!intent) {
      await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', {
        reply_markup: mainKeyboard.reply_markup,
      });
      return;
    }

    if (intent.stage === 'ready') {
      if (intent.flow === 'translate') {
        translationIntents.set(userId, { flow: 'translate', stage: 'engine', direction: intent.direction });
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:', {
          reply_markup: translateEngineKeyboard.reply_markup,
        });
        return;
      }
      if (intent.flow === 'voice') {
        translationIntents.set(userId, { flow: 'voice', stage: 'voice', language: intent.language });
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:', {
          reply_markup: voiceChoiceKeyboard(intent.language).reply_markup,
        });
        return;
      }
    }

    if (intent.stage === 'engine') {
      translationIntents.set(userId, { flow: 'translate', stage: 'direction' });
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:', {
        reply_markup: translateDirectionKeyboard.reply_markup,
      });
      return;
    }

    if (intent.stage === 'voice') {
      translationIntents.set(userId, { flow: 'voice', stage: 'language' });
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞:', {
        reply_markup: voiceLanguageKeyboard.reply_markup,
      });
      return;
    }

    if (intent.stage === 'language' || intent.stage === 'direction') {
      await cancelFlow(ctx);
      return;
    }

    await cancelFlow(ctx);
  });

  bot.action(/publish:([a-f0-9]+)/i, async (ctx) => {
    const token = ctx.match && ctx.match[1];
    await ctx.answerCbQuery();
    if (!token) {
      await ctx.reply('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ä–æ–ª–∏–∫ –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    if (!ctx.from?.id) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    const subscribed = await ensureArenaSubscription(ctx);
    if (!subscribed) {
      return;
    }
    const result = await publishCandidateToken(token, ctx.telegram, ctx.from);
    if (result.ok) {
      await ctx.reply(`üì£ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${getArenaDisplayName()}!`);
    } else {
      let errorMessage = '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
      if (result.reason === 'disabled') {
        errorMessage = '‚öôÔ∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      } else if (result.reason === 'not_found') {
        errorMessage = '‚ö†Ô∏è –í–∏–¥–µ–æ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.';
      } else if (result.reason === 'forbidden') {
        errorMessage = '‚ùå –≠—Ç—É –∫–Ω–æ–ø–∫—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞.';
      }
      await ctx.reply(errorMessage);
    }
  });

  bot.on('text', async (ctx) => {
    const text = ctx.message?.text;
    const userId = ctx.from?.id;

    if (text && text.startsWith('/')) {
      return;
    }

     const awaitingArenaLink = userId ? arenaPublishRequests.has(userId) : false;
     if (awaitingArenaLink) {
       if (text && text.startsWith('http')) {
         arenaPublishRequests.delete(userId!);
         translationIntents.delete(userId!);
         const publishState = ctx.state as { publishToArena?: boolean };
         publishState.publishToArena = true;
         await ctx.reply('üì£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞. –°–∫–∞—á–∏–≤–∞—é —Ä–æ–ª–∏–∫ –∏ –∑–∞–≥—Ä—É–∂—É –µ–≥–æ –≤ –∫–∞–Ω–∞–ª.', {
           reply_markup: mainKeyboard.reply_markup,
         });
       } else {
         await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.', {
           reply_markup: linkPromptKeyboard.reply_markup,
         });
         return;
       }
     }

    if (text && text.startsWith('http')) {
      if (userId && translationIntents.has(userId)) {
        const intent = translationIntents.get(userId)!;
        if (intent.stage === 'ready') {
          translationIntents.delete(userId);
          const token = intent.voicePreset ?? intent.engine;
          ctx.message.text = `/translate ${text} ${intent.direction} ${token}`;
          return translateCommand(ctx);
        }
        if (intent.stage === 'direction') {
          await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞.', {
            reply_markup: translateDirectionKeyboard.reply_markup,
          });
          return;
        }
        if (intent.stage === 'engine') {
          await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞.', {
            reply_markup: translateEngineKeyboard.reply_markup,
          });
          return;
        }
        if (intent.stage === 'language') {
          await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ä–æ–ª–∏–∫–∞.', {
            reply_markup: voiceLanguageKeyboard.reply_markup,
          });
          return;
        }
        if (intent.stage === 'voice') {
          await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏.', {
            reply_markup: voiceChoiceKeyboard(intent.language).reply_markup,
          });
          return;
        }
      }

      ctx.message.text = `/download ${text}`;
      return downloadCommand(ctx);
    }

    if (userId && translationIntents.has(userId)) {
      const intent = translationIntents.get(userId)!;
      if (intent.stage === 'direction') {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:', {
          reply_markup: translateDirectionKeyboard.reply_markup,
        });
        return;
      }
      if (intent.stage === 'engine') {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:', {
          reply_markup: translateEngineKeyboard.reply_markup,
        });
        return;
      }
      if (intent.stage === 'voice') {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:', {
          reply_markup: voiceChoiceKeyboard(intent.language).reply_markup,
        });
        return;
      }
      if (intent.stage === 'language') {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞:', {
          reply_markup: voiceLanguageKeyboard.reply_markup,
        });
        return;
      }
      if (intent.stage === 'ready') {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.', {
          reply_markup: linkPromptKeyboard.reply_markup,
        });
        return;
      }
    }

    await ctx.reply("I don't understand that message. Use /help to see available commands.");
  });

  bot.catch((err, ctx) => {
    logger.error('Bot error', {
      error: err,
      userId: ctx.from?.id,
      username: ctx.from?.username,
      message: ctx.message && 'text' in ctx.message ? ctx.message.text : 'unknown',
    });

    ctx.reply('Sorry, something went wrong. Please try again.');
  });
}

export async function startPolling(): Promise<void> {
  await ensureTempDir();
  await setupBot();
  await logToolVersions();
  await bot.launch();
  ensureSignals();
  logger.info('Bot started successfully (long polling)');
}

export async function configureWebhook(publicUrl: string): Promise<void> {
  await ensureTempDir();
  await setupBot();
  await logToolVersions();
  const base = publicUrl.replace(/\/$/, '');
  await bot.telegram.setWebhook(`${base}/bot`);
  ensureSignals();
  logger.info({ webhookUrl: `${base}/bot` }, 'Webhook configured');
}
